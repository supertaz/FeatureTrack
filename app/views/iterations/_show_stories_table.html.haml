- unless lane[1]['total_items'] == 0 || (controller_name == 'iterations' && action_name == 'current' && lane[1]['open_others'] == 0)
  - if lane[1]['total_items'] == lane[1]['total_items'] - lane[1]['open_items']
    - lane_accepted = true
  -else
    - lane_accepted = false
  - slug = slugify(lane[1]['name'])
  - content_for :navigation_links do
    %a{:href => "##{slug}", :rel => 'scrollTo', :class => lane_accepted ? 'accepted' : nil}= h lane[1]['name']
  .story_table{:class => lane_accepted ? 'accepted' : nil}
    %h2{:id => slug}
      #{h lane[1]['name']}:
      - if defined?(show_lane_progress) && show_lane_progress
        #{lane[1]['total_items'] - lane[1]['open_items']} /
      #{pluralize(lane[1]['total_items'], 'item')}
      %span{:style => 'font-size:.6em'}
        (
        -unless lane[1]['total_features'] == 0
          - if defined?(show_lane_progress) && show_lane_progress
            #{lane[1]['total_features'] - lane[1]['open_features']} /
          #{pluralize(lane[1]['total_features'], 'feature')}
        -unless lane[1]['total_defects'] == 0
          - if defined?(show_lane_progress) && show_lane_progress
            #{lane[1]['total_defects'] - lane[1]['open_defects']} /
          #{pluralize(lane[1]['total_defects'], 'defect')}
        -unless lane[1]['total_chores'] == 0
          - if defined?(show_lane_progress) && show_lane_progress
            #{lane[1]['total_chores'] - lane[1]['open_chores']} /
          #{pluralize(lane[1]['total_chores'], 'chore')}
        -unless lane[1]['total_others'] == 0
          - if defined?(show_lane_progress) && show_lane_progress
            #{lane[1]['total_others'] - lane[1]['open_others']} /
          #{pluralize(lane[1]['total_others'], 'other')}
        )
    %table
      %tr.head
        %th &nbsp;
        %th.title Story title
        %th Status
        %th.nowrap Scheduled for
        %th.nowrap Requested by
        %th.nowrap Current owner
      - i = 0
      -lane[1].values_at('accepted','todo').each_with_index do |category, index|
        - index == 0 ? accepted = true : accepted = false
        - unless category['priority'].nil?
          - category['priority'].sort{|a,b| sort_defect_score(a,b)}.each do |story|
            - i += 1
            =render :partial => 'iterations/show_story_row', :locals => {:story => story, :i => i, :accepted => accepted}
        - unless category['chores'].nil?
          - category['chores'].sort{|a,b| get_state_step(b.current_state) <=> get_state_step(a.current_state)}.each do |story|
            - i += 1
            =render :partial => 'iterations/show_story_row', :locals => {:story => story, :i => i, :accepted => accepted}
        - unless category['features'].nil?
          - category['features'].sort{|a,b| get_state_step(b.current_state) <=> get_state_step(a.current_state)}.each do |story|
            - i += 1
            =render :partial => 'iterations/show_story_row', :locals => {:story => story, :i => i, :accepted => accepted}
        - unless category['defects'].nil?
          - category['defects'].sort{|a,b| sort_defect_score(a,b)}.each do |story|
            - i += 1
            =render :partial => 'iterations/show_story_row', :locals => {:story => story, :i => i, :accepted => accepted}
        - unless category['other'].nil?
          - category['other'].sort{|a,b| get_state_step(b.current_state) <=> get_state_step(a.current_state)}.each do |story|
            - i += 1
            =render :partial => 'iterations/show_story_row', :locals => {:story => story, :i => i, :accepted => accepted}
