- title "#{@story.project.nil? ? 'Unassigned' : @story.project.name} project: #{@story.story_type.upcase} \##{@story.id}"
- content_for :summary_info do
  %h6
    %i
      = link_to "#{@story.story_type.upcase} \##{@story.id}: #{@story.title}", story_url(@story)

#status_info
  %p
    %strong Priority:
    P#{@story.display_priority}
    %br
    %strong Current status:
    =get_state_name @story.status
    - unless @story.source_id.nil?
      %br
      %strong Story ID:
      #{h @story.story_source}#{@story.story_source.nil? ? nil : ': '}
      = link_to "#{@story.source_id}", @story.source_url, :target => '_new'
    %br
    %strong Project:
    = @story.project.nil? ? '<i>Not assigned</i>' : @story.project.name
  %p
    %strong #{@story.story_type == 'bug' ? 'Reporter' : 'Requestor'}:
    =h @story.requestor.fullname
    %br
    %strong Approver:
    #{@story.approver.nil? ? '<i>Not approved</i>' : "#{h @story.approver.fullname}"}
    %br
    %strong Current owner:
    #{@story.owner.nil? ? '<i>Not assigned</i>' : "#{h @story.owner.fullname}"}
  %p
    %strong Developer:
    #{@story.developer.nil? ? '<i>Not assigned</i>' : "#{h @story.developer.fullname}"}
    %br
    %strong Tester:
    #{@story.tester.nil? ? '<i>Not assigned</i>' : "#{h @story.tester.fullname}"}
    %br
    %strong Last assigned:
    #{@story.last_assigned_at.nil? ? '<i>Never assigned</i>' : @story.last_assigned_at}
  %p
    %strong Reported:
    = @story.created_at
    -unless @story.approved_at.nil?
      %br
      %strong Approved:
      = @story.approved_at
    %br
    %strong Started:
    #{@story.started_at.nil? ? '<i>Not started yet</i>' : @story.started_at}
    %br
    %strong Sent to QA:
    #{@story.finished_at.nil? ? '<i>Not in QA yet</i>' : @story.finished_at}
    %br
    %strong Sent to UAT:
    #{@story.delivered_at.nil? ? '<i>Not in UAT yet</i>' : @story.delivered_at}
    %br
    %strong Accepted:
    #{@story.accepted_at.nil? ? '<i>Not accepted yet</i>' : @story.accepted_at}
    %br
    %strong Rejected:
    #{@story.rejected_at.nil? ? '<i>Not rejected</i>' : @story.rejected_at}

#main_detail
  %p
    %strong Environment:
    =@story.environment.nil? ? '<i>Not specified</i>' : @story.environment.name
    %br
    %strong Affected party:
    =@story.affected.nil? ? '<i>Not specified</i>' : @story.affected
    %br
    %strong Functional area:
    =@story.functional_area.nil? ? '<i>Not specified</i>' : @story.functional_area
    %br
    %strong Severity:
    =@story.severity.nil? ? '<i>Not assessed</i>' : @story.get_severity_string
    %br
    %strong Technical risk:
    =@story.risk.nil? ? '<i>Not assessed</i>' : @story.get_risk_level_string
    %br
    %strong Business impact:
    =@story.priority.nil? ? '<i>Not assessed</i>' : @story.get_priority_string
    %br
    %strong Reported against:
    #{@story.against_story_id.nil? ? '<i>No story specified</i>' : "#{h @story.against_story_id}"}
  %p
    %strong Title:
    %i #{@story.title}
    %br
    %strong Description:
    %br
    #{@story.description}

  - if @story.notes.count > 0
    %p.notes
      %strong Notes:
    - @story.notes.each do |note|
      .note
        %strong
          %i
            On #{note.created_at},
            #{note.author.nil? ? 'someone' : note.author.fullname}
            - unless note.subject.nil? || note.subject.blank?
              talked about "#{note.subject}":
            -else
              said:
        %br
          = h note.body
  - else
    %p
      %strong No notes on this story.
  %p.note
    %br
    %strong New note
    %br
    - semantic_form_for [@story, @note] do |f|
      = f.input :subject, :label => 'Subject', :input_html => {:size => 90}
      %br
      = f.input :body, :label => 'Note', :input_html => {:rows => 8, :cols => 100}
      - f.buttons do
        = f.submit 'Add new note'


%p
  - case @story.story_type
    -when 'bug'
      = link_to "Edit", edit_defect_path(@story)
      |
      - if current_user.global_admin || current_user.scrum_master || (@story.created_at > Time.zone.now - 15.minutes && @story.requestor == current_user)
        = link_to 'Delete', defect_url(@story), :confirm => 'Are you sure you want to remove this defect? (This action can\'t be undone!)', :method => :delete
        |
      - if @story.source_id.nil? && ((current_user.developer && @story.display_priority.to_i <= 3) || current_user.development_manager || current_user.scrum_master || current_user.global_admin)
        = link_to 'Promote', promote_defect_url(@story)
        |
      = link_to "All Defects", defects_path
    -when 'feature'
      - if current_user == @story.requestor || current_user.scrum_master || current_user.global_admin
        = link_to "Edit", edit_feature_request_url(@story)
        |
        = link_to "Delete", feature_request_url(@story), :confirm => 'Are you sure you want to delete this request?', :method => :delete
        |
      - if @story.status == 'New' && (current_user.scrum_master || current_user.global_admin)
        = link_to "Approve", approve_feature_request_url(@story)
        |
        = link_to "Reject", reject_feature_request_url(@story)
        |
      = link_to "All Feature Requests", feature_requests_url
  - unless @story.project.nil?
    |
    = link_to "All stories for this project", stories_url(:project_id => @story.project)
